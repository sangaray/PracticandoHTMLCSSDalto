/*
  GRID AREA
  Nos permite crear un layout teórico donde le decimos al navegador en cuentas filas queremos dividir cada fila o darle un nombre que después le podemos reemplazar por un grid. Podemos asignar un elemento a un área específica que le dimos en grid
  USO
  grid-area rowstart/rowend/columnstart/columnend

  Ejemplo
  grid-area: span 2 / span 3
  esto reemplaza a 
  grid-column: span 3;
  grid-row: span 2;

  Ejemplo
    grid-template-areas: "header header header" "nav main aside" "footer footer footer" ;
  Tiene que haber una coincidencia, tiene que haber tres de cada uno
  Delimita las columnas que van a ser usadas y la estructura de la grid
  grid-area: header
  por ejemplo indica el elemento que voy a posicionar

  grid-template-areas define las áreas o secciones del layout
  grid-area asigna cada área o sección a los elementos que van a estar allí

  min-content es una forma de hacer que los elementos sean tan pequeños como su contenido lo permita, sin causar desbordamiento, y es especialmente útil en diseños responsivos y cuadrículas2.
*/

body {
  margin: 0;
  font-family: sans-serif;
  display: flex;
  flex-direction: column;
  align-items: start;
  background-color: #48e3;
}

div,
body {
  box-sizing: border-box;
}

nav,
header,
footer,
aside,
main {
  padding: 20px;
  box-sizing: border-box;
  background-color: #420b8933;
}

.grid {
  min-height: 100vh;
  display: grid;
  grid-template-columns: minmax(200px, 1fr) minmax(300px, 3fr) minmax(200px, 1fr);
  grid-template-rows: 1fr;
  grid-auto-flow: dense;
  margin: auto;
  gap: 10px;
  padding: 10px;
  min-height: 100vh;
  grid-template-areas: "nav main aside";
  flex-grow: 1;
}

.grid {
  max-width: 1460px;
  margin: auto;
}

header {
  background-color: #48e;
  color: #fff;
  border-color: #48e;
  width: 100%;
  padding: 30px;
  text-align: center;
}
nav {
  grid-area: nav;
}

main {
  grid-area: main;
  min-width: 300px;
  max-width: 700px;
}

aside {
  grid-area: aside;
}

footer {
  background-color: #141414;
  color: #fff;
  width: 100%;
  padding: 50px;
  text-align: center;
}

nav,
aside {
  position: sticky;
  top: 0;
  height: 100vh;
}

@media screen and (max-width: 800px) {
  .grid {
    grid-template-columns: minmax(200px, 1fr) minmax(300px, 3fr);
  }

  nav,
  aside {
    height: auto;
    position: static;
  }

  aside {
    display: none;
  }
}

@media screen and (max-width: 580px) {
  .grid {
    grid-template-columns: 1fr;
    grid-template-areas:
      "nav"
      "main"
      "aside";
  }

  nav,
  aside {
    height: auto;
    position: static;
  }

  aside {
    display: none;
  }
}
